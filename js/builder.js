// Generated by CoffeeScript 1.11.1
(function() {
  var Builder, CSpawn, CWD, Path, builder, task;

  Path = require('path');

  CSpawn = require('cross-spawn');

  CWD = Path.resolve(__dirname, '..');

  task = process.argv[2] || 'run';

  Builder = (function() {
    function Builder() {
      this.inDir = Path.join(CWD, 'app');
      this.outDir = Path.join(CWD, 'build');
      this.pkg = require(Path.join(this.inDir, 'package.json'));
      this.name = this.pkg.name;
      this.version = this.pkg.version;
      this.eVersion = this.pkg.electron_version || '1.6.10';
      this.bundleId = 'org.netTrek.' + this.name;
      this.electron = Path.join(CWD, 'node_modules', 'electron', 'cli.js');
      this.packager = Path.join(CWD, 'node_modules', 'electron-packager', 'cli.js');
      this.options = {
        stdio: 'inherit',
        cwd: CWD
      };
    }

    Builder.prototype.run = function() {
      this.spawn('node', [this.electron, this.inDir], 'inherit');
      return null;
    };

    Builder.prototype.open = function() {
      var app, dir;
      if (process.platform !== 'darwin') {
        return null;
      }
      dir = this.name + '-darwin-x64';
      app = this.name + '.app';
      this.spawn('open', [Path.join(this.outDir, dir, app)], 'inherit');
      return null;
    };

    Builder.prototype.build = function(platform, arch) {
      var args;
      args = [this.packager, 'app', this.name, "--overwrite", "--platform=" + platform, "--arch=" + arch, "--electron-version=" + this.eVersion, "--app-version=" + this.version, "--app-bundle-id=" + this.bundleId, "--icon=" + Path.join(this.inDir, 'img/icon.icns'), "--out=" + this.outDir];
      this.spawn('node', args, 'inherit');
      return null;
    };

    Builder.prototype.buildMac = function() {
      this.build('darwin', 'x64');
      return null;
    };

    Builder.prototype.buildWin32 = function() {
      this.build('win32', 'ia32');
      return null;
    };

    Builder.prototype.buildWin64 = function() {
      this.build('win32', 'x64');
      return null;
    };

    Builder.prototype.buildWin = function() {
      this.buildWin32();
      this.buildWin64();
      return null;
    };

    Builder.prototype.buildAll = function() {
      this.buildMac();
      this.buildWin();
      return null;
    };

    Builder.prototype.install = function() {
      var e;
      if (process.platform !== 'darwin') {
        return null;
      }
      try {
        this.spawn('./bin/install.sh', [this.name], 'inherit');
      } catch (error) {
        e = error;
        console.log('error while installing the app: ', e);
      }
      return null;
    };

    Builder.prototype.launch = function() {
      var e;
      if (process.platform !== 'darwin') {
        return null;
      }
      try {
        this.spawn('killall', [this.name], null);
        this.spawn('killall', [this.name], null);
        this.spawn('open', ['/Applications/' + this.name + '.app'], null);
      } catch (error) {
        e = error;
        console.log('error while installing the app: ', e);
      }
      return null;
    };

    Builder.prototype.distribute = function() {
      if (process.platform !== 'darwin') {
        return null;
      }
      this.buildMac();
      this.install();
      return null;
    };

    Builder.prototype.spawn = function(cmd, args, stdio) {
      return CSpawn(cmd, args, this.options);
    };

    Builder.prototype.printHelp = function() {
      console.log("usage:\nrun          (r)   - run app from project folder, same as: node .\nopen         (o)   - open app from build folder (mac only)\nmac          (m)   - build for mac\nwin          (w)   - build win32 and win64\nwin32        (w32) - build win32\nwin64        (w64) - build win64\nall          (a)   - build all platforms\ninstall      (i)   - install and launch app from application folder (mac only)\nlaunch       (l)   - launch app from application folder (mac only)\ndistribute   (d)   - build for mac, install, kill and launch (mac only)\nhelp         (h)   - show this help text");
      return null;
    };

    return Builder;

  })();

  builder = new Builder();

  switch (task) {
    case 'run':
    case 'r':
      builder.run();
      break;
    case 'open':
    case 'o':
      builder.open();
      break;
    case 'install':
    case 'i':
      builder.install();
      break;
    case 'launch':
    case 'l':
      builder.launch();
      break;
    case 'mac':
    case 'm':
      builder.buildMac();
      break;
    case 'win':
    case 'w':
      builder.buildWin();
      break;
    case 'win32':
    case 'w32':
      builder.buildWin32();
      break;
    case 'win64':
    case 'w64':
      builder.buildWin64();
      break;
    case 'all':
    case 'a':
      builder.buildAll();
      break;
    case 'distribute':
    case 'd':
      builder.distribute();
      break;
    case 'help':
    case 'h':
      builder.printHelp();
      break;
    default:
      console.log("\nunknown task \"" + task + "\"\n");
      builder.printHelp();
  }

}).call(this);
